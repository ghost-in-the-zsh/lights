version: "3.7"
services:
  api:
    image: lights-api:latest
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    user: light:light
    hostname: api
    container_name: lights-api
    ports:
      # SECURITY WARNING: The service should be used through a reverse
      # HTTP proxy (e.g. Apache, Nginx) that has SSL/TLS enabled. This
      # will be done at a later time and changed to listen on localhost
      # only.
      - 8000:7000/tcp
    networks:
      # SECURITY WARNING: This service is part of both the `frontend`
      # and `backend` networks, as it's intended to be the "bridge"
      # between client requests and the database backend.
      frontend:
      backend:
    environment:
      - LANG=en_US.UTF-8
      - TZ=America/Denver
      # SECURITY WARNING: These provide app-specific info to access the
      # database backend. See `app.settings.DATABASE_CONFIG` for more.
      # See additional notes in `db` service `environment` entry.
      - LIGHTS_HOST
      - LIGHTS_PORT
      - LIGHTS_DB
      - LIGHTS_USER
      - LIGHTS_PASSWORD
    depends_on:
      - db
    restart: unless-stopped
  db:
    image: lights-db:latest
    build:
      context: .
      dockerfile: docker/db.Dockerfile
    user: postgres:postgres
    hostname: db
    container_name: lights-db
    ports:
      # SECURITY WARNING: Normally, the database backend is expected to
      # remain completely isolated in the `backend` network, but it's
      # being exposed for this demo. This is done for your convenience
      # and allows remote DB administration via `pgAdmin4`; remember to
      # *force* SSL/TLS on client connections on configs, as this exposed
      # port will bypass the reverse HTTP proxy and does not use SSL/TLS,
      # but you still need to protect login credentials. To fully hide
      # the DB service, (e.g. production envs) comment out the `ports`
      # entry and rebuild. Only the `api` service, which is also in the
      # `backend` network, should really get to talk to this service in
      # a real production environment.
      - 8001:5432/tcp
    networks:
      backend:
    volumes:
      - type: volume
        source: postgres-data
        target: /var/lib/postgresql/data
    environment:
      - LANG=en_US.UTF-8
      # Use whatever timezone you want here
      - TZ=America/Denver
      # SECURITY WARNING: The env vars below are resolved at runtime.
      # They must be defined in the host/system Compose is running on[1].
      # For documentation on valid keys, see docs[2]. If password is not
      # set, Postgres sets up a password-less database, b/c this is done
      # before running included init scripts.
      #
      # This is for the super user/role. With `POSTGRES_DB` and
      # `POSTGRES_USER` unspecified, the default `postgres` is used for
      # both.
      #
      # [1] https://docs.docker.com/compose/compose-file/#environment
      # [2] https://hub.docker.com/_/postgres/
      - POSTGRES_PASSWORD
      # SECURITY WARNING: These provide app-specific database and user/role
      # credentials. These must also match in containers that want to
      # connect to the database backend (e.g. `api` service).
      - LIGHTS_DB
      - LIGHTS_USER
      - LIGHTS_PASSWORD
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
    name: lights-db-data

networks:
  frontend:
    driver: bridge
    name: lights-frontend
  backend:
    driver: bridge
    name: lights-backend
